<?php

/**
 * @file
 * Provide notifications and messaging support for organic groups.
 *
 * @author Karthik Kumar / Zen [ http://drupal.org/user/21209 ].
 */

/**
 * Implementation of hook_help().
 */
function og_notifications_help($path, $arg) {
  global $user;

  switch ($path) {
    case 'user/%/notifications/grouptype':
      return t('Customize notifications for each of your groups and each of their content types along with their frequency and delivery method.');
    case 'admin/messaging/notifications/events':
      return t('Notifications OG provides its own templates. These will override the templates here for subscriptions to group content types.');
  }
}

/**
 * Implementation of hook_menu().
 */
function og_notifications_menu() {
  $items = array();
  $items['user/%user/notifications/grouptype'] = array(
    'title' => 'Groups content',
    'description' => 'Content types in groups',
    'page callback' => 'notifications_user_subscription_list_page',
    'page arguments' => array('grouptype', 1),
    // This can be enabled by the UI module
    'access callback' => FALSE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['user/%user/notifications/group'] = array(
    'title' => 'Groups',
    'description' => 'All content in groups',
    'page callback' => 'notifications_user_subscription_list_page',
    'page arguments' => array('group', 1),
    // This can be enabled by the UI module
    'access callback' => FALSE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function og_notifications_perm() {
  return array('subscribe to content in groups');
}

/**
 * Implementation of hook_user().
 * Handle uid entry in the og_notifications table.
 */
function og_notifications_user($type, &$edit, &$user, $category = NULL) {
  switch ($type) {
    case 'insert':
      db_query("INSERT INTO {og_notifications} (uid) VALUES (%d)", $user->uid);
      break;
    case 'update':
      if (isset($edit['og_notifications_autosubscribe'])) {
        og_notifications_user_autosubscribe_set($user->uid, $edit['og_notifications_autosubscribe']);
        unset($edit['og_notifications_autosubscribe']);
      }
      break;
    case 'delete':
      db_query("DELETE FROM {og_notifications} WHERE uid = %d", $user->uid);
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function og_notifications_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'notifications_content_settings_form':
      $form['group'] = array(
        '#type' => 'fieldset',
        '#title' => t('Group subscriptions'),
        '#collapsible' => TRUE,
        '#weight' => 0
      );
      // General content settings
      $select = array();
      $nodetypes = node_get_types();
      $ogtypes = og_get_types('group_post');
      foreach ($ogtypes as $ntype) {
        $select[$ntype] = $nodetypes[$ntype]->name;
      }

      $form['group']['og_notifications_content_types'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Allowed content types'),
        '#default_value' => variable_get('og_notifications_content_types', array()),
        '#options' => $select,
        '#description' => t('Select specific content types which should be <em>allowed</em> for subscriptions to <em>group + content type</em>.'),
        '#multiple' => TRUE
      );
      break;

    case 'user_profile_form':
      // Insert autosubscribe option into the messaging section of the user edit
      // form.
      // user_profile_form is, oddly enough, also the form_id for forms in other
      // sub-tabs such as those added by the profile module.
      if ($form['_category']['#value'] == 'account') {
        $account = $form['_account']['#value'];
        $form['messaging']['og_notifications_autosubscribe'] = array(
          '#type' => 'checkbox',
          '#title' => t('Automatically enable notifications for any groups that I join.'),
          '#description' => t('Group notifications can also be <a href="!manage-url">customized</a> in greater detail if required.', array('!manage-url' => url('user/'. $account->uid .'/notifications/group'))),
          '#default_value' => og_notifications_user_autosubscribe_get($account->uid),
          '#access' => notifications_content_access($account, 'subscribe to content in groups'),
        );
      }
      break;

    case 'og_admin_settings':
      unset($form['og_new_node_subject'], $form['og_new_node_body']);
      $form['og_settings']['notifications']['#description'] = t('Node event notifications can be configured via the <a href="!url">messaging templates</a> interface.', array('!url' => url('admin/messaging/template')));
      // Default autosubscription setting.
      $form['og_settings']['notifications']['og_notifications_autosubscribe'] = array(
        '#type' => 'checkbox',
        '#title' => t('Autosubscribe users to any groups that they join.'),
        '#description' => t('Automatically enable notifications by default. Users can override this via their account page. Changing this setting will only affect new users and those who have not overridden the system default.'),
        '#default_value' => variable_get('og_notifications_autosubscribe', 1),
        '#weight' => -5
      );
      break;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function og_notifications_nodeapi(&$node, $op, $arg = 0) {
  switch ($op) {
    case 'delete':
      notifications_delete_subscriptions(array('type' => 'grouptype'), array('group' => $node->nid));
      break;
  }
}

/**
 * Implementation of hook_og().
 */
function og_notifications_og($op, $gid, $uid, $args) {
  switch ($op) {
    case 'user insert':
      $account = user_load(array('uid' => $uid));
      og_notifications_user_autosubscribe($account, $gid);
      break;
    case 'user delete':
      $account = user_load(array('uid' => $uid));
      og_notifications_user_unsubscribe($account, $gid);
      break;
    case 'user request':
      // This and other notifications related ops drop down to the same case.
      // These different ops have been provided for consistency and flexibility
      // during use by other modules.
    case 'user approve':
    case 'user deny':
    case 'admin create':
    case 'admin new':
    case 'user broadcast':
      $destinations = is_array($uid) ? $uid : array($uid);
      foreach ($destinations as $uid) {
        notifications_lite_send($uid, $args['subject'], $args['body']);
      }
      break;
  }
}

/**
 * Implementation of hook_notifications_templates()
 */
function og_notifications_notifications_templates($op, $type = 'all', $language = NULL) {
  switch ($op) {
    case 'help':
      if (strpos($type, 'og-notifications') === 0) {
        $help[] = t('Most fields will be provided during the event.');
        return $help;
      }
      break;
  
    case 'info':
      $info = array();
      if ($type == 'all' || $type == 'og-notifications') {
        // Generic notifications event
        $info['og-notifications'] = array(
          'module' => 'og_notifications',
          'name' => t('OG notifications (default)'),
          'description' => t('Notifications for organic groups node events. Other group notification strings can be customized via the <a href="!url">OG config</a> page.', array('!url' => url('admin/og/og'))),
        );
      }
      if ($type == 'all' || $type == 'og-notifications-insert') {
        $info['og-notifications-insert'] = array(
          'module' => 'og_notifications',
          'name' => t('OG notifications for new content'),
          'description' => t('Notifications for organic groups node creation events.'),
          'fallback' => 'og-notifications',
        );
      }
      if ($type == 'all' || $type == 'og-notifications-update') {
        $info['og-notifications-update'] = array(
          'module' => 'og_notifications',
          'name' => t('OG notifications for updated content'),
          'description' => t('Notifications for organic groups node update events.'),
          'fallback' => 'og-notifications',
        );
      }
      if ($type == 'all' || $type == 'og-notifications-comment') {
        $info['og-notifications-comment'] = array(
          'module' => 'og_notifications',
          'name' => t('OG notifications for comments'),
          'help' => t('Most fields will be provided during the event.'),
          'description' => t('Notifications for organic groups comment events.'),
          'fallback' => 'og-notifications',
        );
      }
      return $info;

    case 'parts':
      switch ($type) {
        case 'og-notifications':
        case 'og-notifications-insert':
        case 'og-notifications-update':
        case 'og-notifications-comment':
          return array(
            'subject' => t('Subject'),
            'header' => t('Body header'),
            'main' => t('Body'),
            'footer' => t('Body footer')
          );
        break;
      }
      break;
 
    case 'defaults':
      if (strpos($type, 'og-notifications') === 0) {
        $template = array(
          'subject' => t('[site-name] [ogname]: [title]', array(), $language->language),
          'header' => t("Greetings, [user],", array(), $language->language),
          'main' => array(
            t('A [type-name] has been updated in group [ogname]: [title]', array(), $language->language),
            '[node-teaser]',
            t('Read more at [node-url].', array(), $language->language)
          ),
          'footer' => array(
            t('This is an automatic message from [site-name]', array(), $language->language),
            t('To manage your subscriptions, browse to [subscriptions-manage]', array(), $language->language)
          )
        );
        switch ($type) {
          case 'og-notifications-insert':
            $template['main'] = array(
              t('A [type-name] has been created in group [ogname]: [title]', array(), $language->language),
              '[node-teaser]',
              t('Read more at [node-url].', array(), $language->language)
            );
            break;
          case 'og-notifications-comment':
            $template['main'] = array(
                t('A new comment has been added by [comment-author-name] to this thread in group [ogname]: [comment-title]', array(), $language->language),
                '[comment-body]',
                t('Read more at [comment-url] or reply via [comment-reply-url].', array(), $language->language)
            );
            break;
          }
          return $template;
        }
      break;
    case 'tokens':
      $tokens = array();
      if (strpos($type, 'og-notifications') === 0) {
        $tokens = array('global', 'subscription', 'user', 'node', 'comment');
      }
      return $tokens;
  }
}

/**
 * Implementation of hook_notifications().
 */
function og_notifications_notifications($op) {
  switch ($op) {
    case 'subscription types':
      $types['grouptype'] = array(
        'event_type' => 'node',
        'title' => t('Content type in group'),
        'access' => 'subscribe to content in groups',
        'page callback' => 'og_notifications_user_page',
        'user page' => 'user/%user/notifications/grouptype',
        'fields' => array('group', 'type'),
        'description' => t('Subscribe to specific content within a group.'),
        'module' => 'og_notifications', // Will be the prefix for these templates
      );
      $types['group'] = array(
        'event_type' => 'node',
        'title' => t('All content in group'),
        'access' => 'subscribe to content in groups',
        'page callback' => 'og_notifications_user_page',
        'user page' => 'user/%user/notifications/group',
        'fields' => array('group'),
        'description' => t('Subscribe to specific content within a group.'),
        'module' => 'og_notifications', // Will be the prefix for these templates
      );
      return $types;
 
    case 'subscription fields':
      $fields['group'] = array(
        'name' => t('Group'),
        'field' => 'group',
        'type' => 'int',
        'options callback' => 'og_notifications_user_groups',
        'object_type' => 'node',
      );
      return $fields;
  }
}

/**
 * Implementation of hook_notifications_subscription_fields_alter()
 * 
 * Add a different 'options callback' for content types of group subscriptions
 */
function og_notifications_notifications_subscription_fields_alter(&$fields) {
  // Add "[subscription type] options callback" for these types of subscritions
  $fields['type']['grouptype options callback'] = 'og_notifications_content_types';
  $fields['type']['group options callback'] = 'og_notifications_content_types';
}

/**
 * Return available content types for group subscriptions (translated names)
 */
function og_notifications_content_types($subscription = NULL) {
  static $types;
  
  if (!isset($types)) {
    $content_types = array_filter(variable_get('og_notifications_content_types', array()));
    $types = array_intersect_key(notifications_content_type_name(), $content_types);
  }
  
  return $types;
}

/**
 * Implementation of hook notifications_subscription()
 */
function og_notifications_notifications_subscription($op, $subscription = NULL, $account = NULL) {
  switch ($op) {
    case 'access':
      // Check access control for subscription
      if (($conditions = $subscription->get_conditions()) && !empty($conditions['group']) && is_numeric($conditions['group'])) {
        if (($group = node_load($conditions['group'])) && og_is_group_type($group->type) && notifications_content_node_allow($account, $group)) {
          return TRUE;
        }
        else {
          return FALSE;
        }
      }
      break;
  }
}

/**
 * Implementation of hook_notifications_object_node()
 */
function og_notifications_notifications_object_node($op, $node, $account = NULL) {
  switch ($op) {
    case 'conditions':
      if (!empty($node->og_groups)) {
        return array('group' => $node->og_groups);
      }
      break;

    case 'subscriptions':
      // Return available subscription options for this node and this user account
      $options = array();
      // If node is a group type and the user is subscribed to this group.
      if (og_is_group_type($node->type) && isset($account->og_groups[$node->nid])) {
        foreach (og_notifications_content_types() as $type => $name) {
          $options[] = array(
            'name' => t('@type posts in @group', array('@group' => $node->title, '@type' =>  $name)),
            'type' => 'grouptype',
            'fields' => array('group' => $node->nid, 'type' => $type)
          );
        }
      }
      // If node is part of a group user may be subscribed to the node through one
      // of the groups.
      if (!empty($node->og_groups)) {
        foreach ($node->og_groups as $index => $gid) {
          // Only members get to see subscription options.
          $content_types = og_notifications_content_types();
          if (isset($account->og_groups[$gid]) && isset($content_types[$node->type]) ) {
            // Content type
            $options[] = array(
              'name' => t('@type posts in @group', array('@group' => $node->og_groups_both[$gid], '@type' => notifications_content_type_name($node->type))),
              'type' => 'grouptype',
              'fields' => array('group' => $gid, 'type' => $node->type)
            );
          }
        }
      }
      return $options;
  }
}

/**
 * Callback for finding a template name for og subscriptions
 */
function og_notifications_notifications_event_get_template($event) {
  return 'og-notifications-' . $event->action; 
}

/**
 * Options callback for subscription fields in hook_notifications. Returns a
 * list of groups for the current user (presuming that this callback is only
 * relevant in the "add subscriptions" page).
 *
 * @return Array $options
 *   An array of the users organic groups.
 */
function og_notifications_user_groups($subscription) {
  $uid = $subscription->uid;
  $result = db_query("SELECT n.nid, n.title FROM {og_uid} ogu INNER JOIN {node} n USING (nid) WHERE ogu.uid = %d", $uid);
  while ($group = db_fetch_object($result)) {
    $options[$group->nid] = $group->title;
  }

  return $options;
}

/**
 * Handle autosubscriptions for users when they join a group.
 *
 * @param Object $account
 *   The user account object.
 * @param Integer $gid
 *   The node ID of the group being subscribed to.
 */
function og_notifications_user_autosubscribe($account, $gid) {
  if (og_notifications_user_autosubscribe_get($account->uid)) {
    og_notifications_user_subscribe($account, $gid);
  }
}

/**
 * Retrieve autosubscription setting for a particular user. -1 in the
 * og_notifications table indicates that the site default is to be used.
 *
 * @param Integer $uid
 *   The uid of the user.
 * @return Integer
 *   1 or 0 as per the autosubscribe preference.
 */
function og_notifications_user_autosubscribe_get($uid) {
  $autosubscribe = db_result(db_query("SELECT autosubscribe FROM {og_notifications} WHERE uid = %d", $uid));
  return $autosubscribe == -1 ? variable_get('og_notifications_autosubscribe', 1) : $autosubscribe;
}

/**
 * Retrieve autosubscription setting for a particular user.
 *
 * @param Integer $uid
 *   The uid of the user.
 * @param Integer $autosubscribe
 *   Autosubscription option: 0 or 1.
 */
function og_notifications_user_autosubscribe_set($uid, $autosubscribe) {
  return db_query("UPDATE {og_notifications} SET autosubscribe = %d WHERE uid = %d", $autosubscribe, $uid);
}

/**
 * Subscribe a user to a group or to be more precise, to all subscribe-able
 * content types within the group. This method is also called during the upgrade
 * process in .install.
 *
 * @param Object $account
 *   The user account object.
 * @param Integer $gid
 *   The node ID of the group being subscribed to.
 */
function og_notifications_user_subscribe($account, $gid) {
  // Remove all existing user->group subscriptions.
  og_notifications_user_unsubscribe($account, $gid);

  $subscription_default = notifications_build_subscription('grouptype');
  $subscription_default->set_account($account);
  $subscription_default->add_condition('group', $gid);

  // Only subscribe the user to enabled types.
  $content_types = array_filter(variable_get('og_notifications_content_types', array()));
  // If the types array is empty, subscribe to all group types. This is mainly
  // only valid during the upgrade.
  if (empty($content_types)) {
    $content_types = og_get_types('group_post');
  }
  foreach ($content_types as $type) {
    // Clone the template to create a real subscription instance
    $subscription = clone $subscription_default;
    // String cast due to notifications requiring it (as the value field is
    // a varchar).
    $subscription->add_condition('type', $type);

    notifications_save_subscription($subscription);
  }
}

/**
 * Unsubscribe a user from a group. This also unsubscribes the user from any
 * grouptype subscriptions within the group.
 *
 * @param Object $account
 *   The user account object.
 * @param Integer $gid
 *   The node ID of the group being subscribed to.
 */
function og_notifications_user_unsubscribe($account, $gid) {
  notifications_delete_subscriptions(array('uid' => $account->uid, 'type' => 'grouptype'), array('group' => $gid));
}

// Used by Views field/filter.
// TODO: Use constants instead of integers.
function og_notifications_autosubscribe_map() {
  return array(
    -1 => t('Site default'),
    0 => t('Disabled'),
    1 => t('Enabled'),
  );
}
