<?php
/**
 * @file
 * Retrieves email for posting as nodes and comments.
 */

/**
 * Implementation of hook_perm().
 */
function mailhandler_perm() {
  return array('administer mailhandler');
}

/**
 * Implementation of hook_help().
 */
function mailhandler_help($path, $arg) {
  switch ($path) {
    case 'admin/help#mailhandler':
      // Return a line-break version of README.txt and INSTALL.txt.
      $help = "README.txt\n";
      $help .= "==========\n";
      $help .= file_get_contents( dirname(__FILE__) . "/README.txt");
      $help .= "\nINSTALL.txt\n";
      $help .= "===========\n";
      $help .= file_get_contents( dirname(__FILE__) . "/INSTALL.txt");
      return filter_filter('process', 1, NULL, $help);
    case 'admin/build/mailhandler/add':
      return t('Please see the <a href="@handbook-page">handbook page on configuring mailboxes</a> for additional help.', array('@handbook-page' => url('http://drupal.org/node/207366')));
    case 'admin/build/feeds/edit/%':
      if ($arg[6] == 'MailhandlerParser') {
        return t('Please see the <a href="@handbook-page">handbook page on configuring commands</a> for additional help.', array('@handbook-page' => url('http://drupal.org/node/1158574')));
      }
      break;
  }
}

/**
 * Implementation of hook_ctools_plugin_type().
 */
function mailhandler_ctools_plugin_type() {
  return array(
    'authenticate' => array(),
    'commands' => array(),
    'filters' => array(),
    'retrieve' => array(),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function mailhandler_ctools_plugin_directory($module, $plugin) {
  if ($module != 'feeds') {
    return 'plugins/' . $module . '/' . $plugin;
  }
}

/**
 * Implementation of hook_feeds_plugins().
 */
function mailhandler_feeds_plugins() {
  $info = array();
  $info['MailhandlerFetcher'] = array(
    'name' => 'Mailhandler fetcher',
    'description' => 'Connects to an IMAP/POP mailbox.',
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'MailhandlerFetcher',
      'file' => 'MailhandlerFetcher.inc',
      'path' => drupal_get_path('module', 'mailhandler') . '/plugins/feeds/plugins',
    ),
  );
  $info['MailhandlerParser'] = array(
    'name' => 'Mailhandler IMAP stream parser',
    'description' => 'Parses an IMAP stream.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'MailhandlerParser',
      'file' => 'MailhandlerParser.inc',
      'path' => drupal_get_path('module', 'mailhandler') . '/plugins/feeds/plugins',
    ),
  );
  return $info;
}

/**
 * Implementation of hook_filter().
 */
function mailhandler_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
  switch ($op) {
    case 'list':
      return _mailhandler_filter_list();

    case 'description':
      return _mailhandler_filter_description($delta);

    case 'process':
      return _mailhandler_filter_process($delta, $format, $text, $cache_id);

    case 'settings':
      return _mailhandler_filter_settings($format);

    default:
      return $text;
  }
}

/**
 * Implementation of hook_coder_ignore().
 */
function mailhandler_coder_ignore() {
  return array(
    'path' => drupal_get_path('module', 'mailhandler'),
    'line prefix' => drupal_get_path('module', 'mailhandler'),
  );
}

/**
 * Implementation of hook_hook_info().
 */
function mailhandler_hook_info() {
  return array(
    'mailhandler' => array(
      'mailhandler_auth' => array(
        'auth_failed' => array(
          'runs when' => t('When authentication fails on Mailhandler mail parsing'),
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_mailhandler_auth().
 */
function mailhandler_mailhandler_auth($op, $message) {
  if ($op != 'auth_failed') {
    return;
  }
  $aids = _trigger_get_hook_aids('mailhandler_auth', $op);
  $context = array(
    'hook' => 'mailhandler_auth',
    'op' => $op,
    'message' => $message,
  );
  actions_do(array_keys($aids), $message, $context);
}

/**
 * Wrapper to load any class type.
 */
function mailhandler_plugin_load_class($module, $plugin, $type, $id, $args = NULL) {
  ctools_include('plugins');
  if ($class = ctools_plugin_load_class($module, $type, $plugin, 'handler')) {
    return new $class($args);
  }
}

/**
 * Wrapper to load plugins.
 *
 * @param $type
 *   String - type of mailhandler plugins to retrieve.
 */
function mailhandler_get_plugins($module, $type) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins($module, $type);
  $result = array();
  $weights = array();
  foreach ($plugins as $key => $info) {
    if (!empty($info['hidden'])) {
      continue;
    }
    if (!isset($info['weight'])) {
      $info['weight'] = 10;
    }
    $weights[] = $info['weight'];
    $result[$key] = $info;
  }
  array_multisort($weights, $result);
  return $result;
}

/**
 * Load a mailbox.
 *
 * @param $mail
 *   This mailbox's name value.
 * @return
 *   An array of options for the specified mailbox.
 */
function mailhandler_mailbox_load($mail) {
  ctools_include('export');
  return ctools_export_crud_load('mailhandler_mailbox', $mail);
}

/**
 * Load all mailboxes.
 */
function mailhandler_mailboxes_load() {
  ctools_include('export');
  return ctools_export_crud_load_all('mailhandler_mailbox');
}

function _mailhandler_filter_list() {
  return array(
    0 => t('Mailhandler signature remover'),
  );
}

function _mailhandler_filter_description($delta = 0) {
  switch ($delta) {
    case 0:
      return t('Strips signatures from emails.');
  }
}

function _mailhandler_filter_process($delta = 0, $format = -1, $text = '', $cache_id = 0) {
  switch ($delta) {
    case '0':
      $strip_body_regex = variable_get("mailhandler_filter_$format", '-- ') . "\n";
      $sig_index = strpos($text, $strip_body_regex);
      if ($sig_index !== FALSE) {
        $text = drupal_substr($text, 0, $sig_index);
      }
      return $text;
  }
}

function _mailhandler_filter_settings($format) {
  $form['mailhandler_filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Strip signature'),
    '#collapsible' => TRUE,
  );
  $form['mailhandler_filter']["sig_separator_$format"] = array(
    '#type' => 'textfield',
    '#title' => t('Signature separator'),
    '#default_value' => variable_get("mailhandler_filter_$format", '-- '),
    '#description' => t('After the first line matching this string, any further text will be hidden. A typical value is <strong>"-- "</strong> that is two dashes followed by a blank in an otherwise empty line. Leave blank to include signature text in nodes.'),
  );
  return $form;
}

/**
 * Determines 'from' address.
 *
 * Determines 'from' address using either the mailbox setting or via the header.
 *
 * @param $header
 *   Object message header information
 * @param $mailbox
 *   Array mailbox settings
 * @return
 *   Array of the 'from' address and 'from' name
 */
function _mailhandler_get_fromaddress($header, $mailbox) {
  if (($fromheader = drupal_strtolower($mailbox->settings['fromheader'])) && isset($header->$fromheader)) {
    $from = $header->$fromheader;
  }
  else {
    $from = $header->from;
  }
  return array($from[0]->mailbox . '@' . $from[0]->host, (isset($from[0]->personal)) ? $from[0]->personal : '');
}

/**
 * Builds an options array for a select field from a source array.
 */
function _mailhandler_build_options($source, $key_name = 'name') {
  $options = array();
  foreach ($source as $key => $value) {
    $options[$key] = is_object($value) ? $value->$key_name : $value[$key_name];
  }
  return $options;
}
