<?php

/**
 * Implementation hook_autoload_info().
 */
function oauth_common_autoload_info() {
  $lib = array('file' => 'lib/OAuth.php');

  return array(
    'DrupalOAuthServer'         => array('file' => 'includes/DrupalOAuthServer.inc'),
    'DrupalOAuthDataStore'      => array('file' => 'includes/DrupalOAuthDataStore.inc'),
    'DrupalOAuthRequest'        => array('file' => 'includes/DrupalOAuthRequest.inc'),
    'DrupalOAuthToken'          => array('file' => 'includes/DrupalOAuthToken.inc'),
    'DrupalOAuthConsumer'       => array('file' => 'includes/DrupalOAuthConsumer.inc'),
    'OAuthSignatureMethod_HMAC' => array('file' => 'includes/OAuthSignatureMethod_HMAC.inc'),
    'OAuthSignatureMethod_PLAINTEXT_SSL' => array('file' => 'includes/OAuthSignatureMethod_PLAINTEXT_SSL.inc'),
    'DrupalOAuthClient'         => array('file' => 'includes/DrupalOAuthClient.inc'),
    'OAuthServer'     => $lib,
    'OAuthDataStore'  => $lib,
    'OAuthRequest'    => $lib,
    'OAuthConsumer'   => $lib,
    'OAuthToken'      => $lib,
    'OAuthUtil'      => $lib,
  );
}

/**
 * Implementation of hook_enable().
 */
function oauth_common_enable() {
  // Flush the autoload caches so that our classes are registered
  autoload_flush_caches();
}

/**
 * Implementation of hook_theme().
 */
function oauth_common_theme() {
  return array(
    'oauth_common_context_list' => array(
      'template' => 'oauth_common_context_list',
      'arguments' => array(
        'contexts' => array(),
      ),
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function oauth_common_perm() {
  $permissions = array(
    'oauth authorize any consumers',
    'oauth register any consumers',
    'administer oauth',
  );

  // Add seperate permissions for creating and
  // authorizing consumers in each context.
  /*
  foreach(oauth_common_authorization_contexts() as $context => $levels) {
    $permissions[] = sprintf('oauth register consumers in %s', $context);
    $permissions[] = sprintf('oauth authorize consumers in %s', $context);
  }
  */

  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function oauth_common_menu() {
  $menu = array();
  $admin_base = array(
    'access arguments' => array('administer oauth'),
    'file' => 'oauth_common.admin.inc',
  );

  $menu['admin/settings/oauth'] = array(
    'title' => 'OAuth',
    'description' => 'The different context for authorization',
    'page callback' => 'oauth_common_list_context',
    'type' => MENU_NORMAL_ITEM,
  ) + $admin_base;

  $menu['admin/settings/oauth/list'] = array(
    'title' => 'Contexts',
    'description' => 'The different context for authorization',
    'page callback' => 'oauth_common_list_context',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ) + $menu['admin/settings/oauth'];

  $menu['admin/settings/oauth/settings'] = array(
    'title' => 'Settings',
    'description' => 'Settings for OAuth',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_admin'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  ) + $admin_base;

  $menu['admin/settings/oauth/add'] = array(
    'title'          => 'Add context',
    'page callback'  => 'oauth_common_add_context',
    'type'           => MENU_LOCAL_TASK,
    'weight'         => 10,
  ) + $admin_base;

  $menu['admin/settings/oauth/%oauth_common_context/edit'] = array(
    'title'          => 'Edit context',
    'page callback'  => 'oauth_common_edit_context',
    'page arguments' => array(3),
    'type'           => MENU_LOCAL_TASK,
    'weight'         => 10,
  ) + $admin_base;

  $menu['admin/settings/oauth/%oauth_common_context/export'] = array(
    'title'          => 'Export context',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('oauth_common_export_context', 3),
    'type'           => MENU_LOCAL_TASK,
    'weight'         => 20,
  ) + $admin_base;

  $menu['admin/settings/oauth/%oauth_common_context/delete'] = array(
    'title'          => 'Delete context',
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('oauth_common_delete_confirm_context', 3),
    'type'           => MENU_CALLBACK,
  ) + $admin_base;

  $menu['admin/settings/oauth/%oauth_common_context/disable'] = array(
    'page callback'  => 'oauth_common_context',
    'page arguments' => array(3),
    'type'           => MENU_CALLBACK,
  ) + $admin_base;

  $menu['admin/settings/oauth/%oauth_common_context/enable'] = array(
    'page callback'  => 'oauth_common_enable_context',
    'page arguments' => array(3),
    'type'           => MENU_CALLBACK,
  ) + $admin_base;

  // OAuth doesn't need different endpoints for the different context as all
  // actions are done with a specific consumer, which in itself is associated
  // with a context.

  $page_base = array(
    'access callback' => '_oauth_common_always_true',
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/authorize'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_authorize'),
  ) + $page_base;

  $menu['oauth/authorized'] = array(
    'title' => 'Authorization finished',
    'page callback' => '_oauth_common_authorized',
  ) + $page_base;

  $menu['oauth/request_token'] = array(
    'page callback' => '_oauth_common_request_token',
  ) + $page_base;

  $menu['oauth/request_token_authorized'] = array(
    'page callback' => '_oauth_common_request_token_authorized',
  ) + $page_base;

  $menu['oauth/authorized'] = array(
    'title' => 'Authorization finished',
    'page callback' => '_oauth_common_authorized',
  ) + $page_base;

  $menu['oauth/access_token'] = array(
    'page callback' => '_oauth_common_access_token',
  ) + $page_base;

  $menu['user/%user/applications'] = array(
    'title' => 'Applications',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_applications', 1),
    'access callback' => '_oauth_common_user_access',
    'access arguments' => array(1),
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $menu['user/%user/applications/add'] = array(
    'title' => 'Add application',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_applications_add', 1),
    'access callback' => 'oauth_common_can_create_consumers',
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['user/%user/applications/%/edit'] = array(
    'title' => 'Edit application',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_applications_edit', 1, 3),
    'access callback' => 'oauth_common_can_create_consumers',
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['user/%user/applications/%/delete'] = array(
    'title' => 'Delete application',
    'page callback' =>'drupal_get_form',
    'page arguments' => array('_oauth_common_user_applications_delete', 1, 3),
    'access callback' => 'oauth_common_can_delete_consumer',
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['user/%user/applications/authorization/%'] = array(
    'title' => 'Edit authorization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_authorization_edit', 1, 4),
    'access callback' => '_oauth_common_user_access',
    'access arguments' => array(1, 'oauth authorize consumers'),
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['user/%user/applications/authorization/%/delete'] = array(
    'title' => 'Delete authorization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_oauth_common_user_authorization_delete', 1, 4),
    // We always want to allow the user to delete a authorization, that
    // shouldn't be a permission that can be rescinded.
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'oauth_common.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/test/valid-consumer'] = array(
    'file' => 'oauth_common.pages.inc',
    'page callback' => '_oauth_common_validate_request_callback',
    'page arguments' => array('consumer'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['oauth/test/valid-access-token'] = array(
    'file' => 'oauth_common.pages.inc',
    'page callback' => '_oauth_common_validate_request_callback',
    'page arguments' => array('access token'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Implementation of hook_cron().
 */
function oauth_common_cron() {
  db_query("DELETE FROM {oauth_common_token}
    WHERE expires!=0
    AND expires <= %d", array(
      ':now' => time(),
  ));
}

/**
 * Implementation of hook_oauth_default_contexts().
 */
function oauth_common_default_oauth_common_context() {
  $contexts = array();

  $context = new stdClass;
  $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
  $context->name = 'default';
  $context->title = 'Default context';
  $context->authorization_options = array();
  $context->authorization_levels = array(
    '*' => array(
      'title' => 'Full access',
      'description' => 'This will give @appname the same permissions that you normally have and will allow it to access the full range of services that @sitename provides.',
    ),
    'read' => array(
      'title' => 'Read access',
      'description' => 'This will allow @appname to fetch content that you have access to on @sitename.',
    ),
    'update' => array(
      'title' => 'Update access',
      'description' => 'This will allow @appname to update content that you have permissions to edit.',
    ),
    'create' => array(
      'title' => 'Create access',
      'description' => 'This will allow @appname to create new content on @sitename.',
    ),
    'delete' => array(
      'title' => 'Delete access',
      'description' => 'This will allow @appname to delete content from @sitename.',
    ),
  );
  $contexts[$context->name] = $context;

  return $contexts;
}

/**
 * Implementation of hook_user().
 */
function oauth_common_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    // Delete all tokens and consumers related to a user
    module_load_include('inc', 'oauth_common');
    $consumers = oauth_common_user_consumers($account->uid);
    db_query('DELETE FROM {oauth_common_consumer}
      WHERE uid = %d', array(
        ':uid' => $account->uid,
      ));
    db_query("DELETE FROM {oauth_common_token}
      WHERE uid = %d OR consumer_key = '%s'", array(
        ':uid' => $account->uid,
        ':consumer_key' => $consumer->consumer_key,
      ));
  }
}

/**
 * Implementation of hook_xrds().
 */
function services_oauth_xrds() {
  $xrds = array();
  $xrds['oauth'] = array(
    'services' => array(
      array(
        'data' => array(
          'Type' => array('http://oauth.net/discovery/1.0'),
          'URI' => array('#main'),
        ),
      ),
      array(
        'data' => array(
          'Type' => array(
            'http://oauth.net/core/1.0/endpoint/request',
            'http://oauth.net/core/1.0/parameters/auth-header',
            'http://oauth.net/core/1.0/parameters/uri-query',
            'http://oauth.net/core/1.0/signature/HMAC-SHA1',
          ),
          'URI' => array(url('oauth/request_token', array('absolute'=>TRUE))),
        ),
      ),
      array(
        'data' => array(
          'Type' => array(
            'http://oauth.net/core/1.0/endpoint/authorize',
            'http://oauth.net/core/1.0/parameters/uri-query',
          ),
          'URI' => array(url('oauth/authorize', array('absolute'=>TRUE))),
        ),
      ),
      array(
        'data' => array(
          'Type' => array(
            'http://oauth.net/core/1.0/endpoint/access',
            'http://oauth.net/core/1.0/parameters/auth-header',
            'http://oauth.net/core/1.0/parameters/uri-query',
            'http://oauth.net/core/1.0/signature/HMAC-SHA1',
          ),
          'URI' => array(url('oauth/access_token', array('absolute'=>TRUE))),
        ),
      ),
    ),
  );
  return $xrds;
}

/**
 * Access callback function used by several menu items.
 *
 * @param stdClass $user
 *  A user object.
 * @param string $permission
 *  The permission that is needed in addition to edit access on the $user.
 */
function _oauth_common_user_access($user, $permission = NULL) {
  return user_edit_access($user) && (empty($permission) || user_access($permission));
}

/**
 * Deterines if a user has the necessary permissions to create consumers.
 *
 * @param object $account
 *  The user account to check permissions for. Defaults to the currently
 *  logged in user.
 * @return bool
 */
function oauth_common_can_create_consumers($account = NULL) {
  global $user;
  if (!$account) {
    $account = $user;
  }

  $can_register_consumers = user_access('oauth register any consumers', $account);
  if (!$can_register_consumers) {
    foreach(oauth_common_authorization_contexts() as $context => $levels) {
      $can_register_consumers = $can_register_consumers || user_access(sprintf('oauth register consumers in %s', $context), $account);
    }
  }
  return $can_register_consumers;
}

/**
 * Deterines if a user has the necessary permissions to delete a consumer.
 *
 * @param object $account
 *  The user account to check permissions for. Defaults to the currently
 *  logged in user.
 * @return bool
 */
function oauth_common_can_delete_consumer($consumer_key, $account = NULL, $provider_consumer=TRUE) {
  global $user;
  if (!$account) {
    $account = $user;
  }

  $can_create = oauth_common_can_create_consumers($account);
  $consumerobj = DrupalOAuthConsumer::load($consumer_key, $provider_consumer);

  return $can_create && ($consumerobj->uid == $account->uid || user_access('administer users', $account));
}

/**
 * This function is used as a access callback
 * when the authentication of the request shouldn't be
 * done by the menu system.
 *
 * @return bool
 *  Always returns TRUE
 */
function _oauth_common_always_true() {
  return TRUE;
}

/**
 * Gets a request token from a oauth provider and returns the authorization
 * url. The request token is saved in the database.
 *
 * @param OAuthToken $consumer_token
 *  The consumer token to use
 * @param string $request_endpoint
 *  Optional. Pass a custom endpoint if needed. Defaults to '/oauth/request_token'.
 * @param string $authorize_endpoint
 *  Optional. Pass a custom endpoint if needed. Defaults to '/oauth/authorize'.
 * @return string
 *  The url that the client should be redirected to to authorize
 *  the request token.
 */
function oauth_common_get_request_token($consumer_token, $request_endpoint='/oauth/request_token', $authorize_endpoint='/oauth/authorize') {
  $client = new DrupalOAuthClient($consumer_token);
  $request_token = $client->getRequestToken($request_endpoint);
  $request_token->write();
  return $client->getAuthorizationUrl($authorize_endpoint);
}

/**
 * Gets stored tokens for a consumer.
 *
 * @param string $consumer_key
 *  The key of the consumer to get tokens for.
 * @param string $type
 *  The token type: 'request' or 'access'.
 * @param string $provider_tokens
 *  Optional. Pass TRUE if provider tokens should be return, FALSE if consumer
 *  tokens should be returned. Defaults to TRUE.
 * @return array
 *  An array of DrupalOAuthToken objects.
 */
function oauth_common_get_tokens($consumer_key, $type='access', $provider_tokens=TRUE) {
  $res = db_query("SELECT *
    FROM {oauth_common_token}
    WHERE consumer_key = '%s'
    AND type = '%s',
    AND provider_token = %d", array(
      ':consumer_key' => $consumer_key,
      ':provider_token' => $provider_tokens,
    ));
  $tokens = array();
  while ($token = DrupalOAuthToken::fromResult($res)) {
    $tokens[] = $token;
  }
  return $tokens;
}

/**
 * Create a new context with defaults appropriately set from schema.
 * 
 * @return stdClass
 *  An context initialized with the default values.
 */
function oauth_common_context_new() {
  ctools_include('export');
  return ctools_export_new_object('oauth_common_context');
}

/**
 * Load a single context.
 *
 * @param string $name
 *  The name of the context.
 * @return stdClass
 *  The context configuration.
 */
function oauth_common_context_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('oauth_common_context', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
  else {
    return FALSE;
  }
}

/**
 * Loads the context for a request.
 *
 * @param OAuthRequest $request
 * @return object
 *  The context configuration.
 */
function oauth_common_context_from_request($request) {
  $context = NULL;
  $consumer_key = $request->get_parameter('oauth_consumer_key');
  $token_key = $request->get_parameter('oauth_token');

  if (empty($consumer_key) && !empty($token_key)) {
    $token = DrupalOAuthToken::load($token_key, TRUE);
    if ($token) {
      $consumer_key = $token->consumer_key;
    }
  }
  if (!empty($consumer_key)) {
    $consumer = DrupalOAuthConsumer::load($consumer_key, TRUE);
  }

  if ($consumer) {
    $context = oauth_common_context_load($consumer->context);
  }
  return $context;
}

/**
 * Load all contexts.
 *
 * @return array
 *  Array of context objects keyed by context names.
 */
function oauth_common_context_load_all() {
  ctools_include('export');
  return ctools_export_load_object('oauth_common_context');
}

/**
 * Saves an context in the database.
 *
 * @return void
 */
function oauth_common_context_save($context) {
  $update = (isset($context->cid)) ? array('cid') : array();
  drupal_write_record('oauth_common_context', $context, $update);
}

/**
 * Remove an context.
 *
 * @return void
 */
function oauth_common_context_delete($context) {
  db_query("DELETE FROM {oauth_common_context} WHERE name = '%s' AND cid = %d", $context->name, $context->cid);
}

/**
 * Export an context.
 *
 * @return string
 */
function oauth_common_context_export($context, $indent = '') {
  ctools_include('export');
  $output = ctools_export_object('oauth_common_context', $context, $indent);
  return $output;
}

/**
 * Lists all available contexts.
 *
 * @return array
 */
function oauth_common_context_list() {
  $return = array();
  $contexts = oauth_common_context_load_all();
  foreach ($contexts as $context) {
    $return[$context->name] = $context->title;
  }
  return $return;
}
